name: Laravel CI/CD Pipeline 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_ENV: production
  DEPLOY_DIR: /var/www/laravel-d4rpl2c-kelompok-4
  BACKUP_DIR: /var/www/backups
  PHP_USER: www-data
  PHP_GROUP: www-data

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tanismart
          MYSQL_USER: dbeaver
          MYSQL_PASSWORD: '@Polindra123'
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -p$$MYSQL_ROOT_PASSWORD"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, ctype, fileinfo, openssl, PDO, tokenizer, xml, mysql, pdo_mysql
        coverage: none

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader

    - name: Configure environment
      run: |
        cp .env.example .env
        sed -i 's/APP_ENV=local/APP_ENV=production/' .env
        sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=mysql/' .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_PORT=3306/DB_PORT=3306/' .env
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=tanismart/' .env
        sed -i 's/DB_USERNAME=root/DB_USERNAME=dbeaver/' .env
        sed -i 's/DB_PASSWORD=/DB_PASSWORD=@Polindra123/' .env
        echo "APP_URL=${{ secrets.APP_URL }}" >> .env

    - name: Generate app key
      run: php artisan key:generate

    - name: Wait for MySQL
      run: |
        for i in {1..10}; do
          if mysqladmin ping -h127.0.0.1 -udbeaver -p'@Polindra123' --silent; then
            echo "MySQL ready"
            break
          fi
          echo "Waiting for MySQL... ($i/10)"
          sleep 3
        done

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install NPM dependencies
      run: npm ci --prefer-offline

    - name: Build frontend
      run: npm run build

    - name: Run database migrations
      run: php artisan migrate:fresh --force

    - name: Run tests
      run: php artisan test

    - name: Prepare deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: laravel-app
        path: |
          .
          !.github/
          !.git/
          !node_modules/
          !vendor/
          !storage/debugbar/
        retention-days: 1

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: laravel-app
          path: ./deploy

      - name: Prepare deployment structure
        run: |
          # Buat struktur direktori
          mkdir -p ./deploy/storage/framework/{cache,sessions,testing,views}
          mkdir -p ./deploy/storage/logs/
          touch ./deploy/storage/logs/laravel.log
              
          # Handle .env file
          if [ -f .env ]; then
            echo "Using existing .env file"
            cp .env ./deploy/.env
          else
            echo "Creating new .env from example"
            cp .env.example ./deploy/.env
              
            # Set basic production values
            sed -i 's/APP_ENV=local/APP_ENV=production/' ./deploy/.env
            sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' ./deploy/.env
              
            # Generate app key
            echo "APP_KEY=$(php artisan key:generate --show)" >> ./deploy/.env
          fi
              
          # Set permission awal
          chmod 644 ./deploy/.env

      - name: Backup existing deployment
        run: |
          sshpass -p "${{ secrets.SSH_KEY_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            mkdir -p $BACKUP_DIR
            sudo cp -r $DEPLOY_DIR $BACKUP_DIR/laravel-backup-$(date +%Y%m%d%H%M%S)
          "

      - name: Transfer files (secure rsync)
        run: |
          sshpass -p "${{ secrets.SSH_KEY_PASSWORD }}" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.env' \
            --exclude='storage/app/public/' \
            ./deploy/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$DEPLOY_DIR

      - name: Setup proper permissions and deploy
        run: |
          sshpass -p "${{ secrets.SSH_KEY_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            # Backup existing .env if exists
            [ -f $DEPLOY_DIR/.env ] && sudo cp $DEPLOY_DIR/.env /tmp/
            
            # Set directory structure
            sudo mkdir -p $DEPLOY_DIR/storage/framework/{cache,sessions,testing,views}
            sudo mkdir -p $DEPLOY_DIR/storage/logs/
            
            # Set ownership
            sudo chown -R $PHP_USER:$PHP_GROUP $DEPLOY_DIR
            
            # Set directory permissions (775)
            sudo find $DEPLOY_DIR -type d -exec chmod 775 {} \;
            
            # Set file permissions (664)
            sudo find $DEPLOY_DIR -type f -exec chmod 664 {} \;
            
            # Special permissions for storage
            sudo chmod -R 775 $DEPLOY_DIR/storage
            sudo chmod -R 775 $DEPLOY_DIR/bootstrap/cache
            
            # Restore .env with secure permissions
            [ -f /tmp/.env ] && sudo mv /tmp/.env $DEPLOY_DIR/.env
            sudo chown $PHP_USER:$PHP_GROUP $DEPLOY_DIR/.env
            sudo chmod 640 $DEPLOY_DIR/.env
            
            # Ensure log file exists and is writable
            sudo touch $DEPLOY_DIR/storage/logs/laravel.log
            sudo chown $PHP_USER:$PHP_GROUP $DEPLOY_DIR/storage/logs/laravel.log
            sudo chmod 664 $DEPLOY_DIR/storage/logs/laravel.log
            
            # Laravel deployment commands
            cd $DEPLOY_DIR
            sudo -u $PHP_USER composer install --no-dev --optimize-autoloader
            sudo -u $PHP_USER php artisan storage:link
            sudo -u $PHP_USER php artisan config:clear
            sudo -u $PHP_USER php artisan cache:clear
            sudo -u $PHP_USER php artisan view:clear
            sudo -u $PHP_USER php artisan config:cache
            sudo -u $PHP_USER php artisan route:cache
            sudo -u $PHP_USER php artisan view:cache
            
            # Database migration
            sudo -u $PHP_USER php artisan migrate --force
            
            # Restart services
            sudo systemctl reload nginx
            sudo systemctl restart php8.3-fpm
          "

      - name: Verify deployment
        run: |
          # Check HTTP response
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }})
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Deployment verification failed with status $HTTP_STATUS"
            exit 1
          fi
          
          # Verify permissions remotely
          sshpass -p "${{ secrets.SSH_KEY_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            echo '=== Permission Verification ==='
            ls -ld $DEPLOY_DIR
            ls -ld $DEPLOY_DIR/storage
            ls -ld $DEPLOY_DIR/bootstrap/cache
            ls -l $DEPLOY_DIR/storage/logs/laravel.log
            ls -l $DEPLOY_DIR/.env
            echo '=== Log File Test ==='
            sudo -u $PHP_USER php $DEPLOY_DIR/artisan log:test
          "